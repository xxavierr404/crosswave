/**
 *
 * Please note:
 * This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * Do not edit this file manually.
 *
 */

@file:Suppress(
    "ArrayInDataClass",
    "EnumEntryName",
    "RemoveRedundantQualifierName",
    "UnusedImport"
)

package org.xxavierr404.crosswave.auth.client.apis

import com.fasterxml.jackson.annotation.JsonProperty

import org.springframework.web.reactive.function.client.WebClient
import org.springframework.web.reactive.function.client.WebClientResponseException
import org.springframework.http.codec.json.Jackson2JsonDecoder
import org.springframework.http.codec.json.Jackson2JsonEncoder
import org.springframework.http.ResponseEntity
import org.springframework.http.MediaType
import reactor.core.publisher.Mono
import org.springframework.util.LinkedMultiValueMap

import org.xxavierr404.crosswave.auth.client.models.ErrorDto
import org.xxavierr404.crosswave.auth.client.models.GetTokenDto
import org.xxavierr404.crosswave.auth.client.models.LoginRequestDto
import org.xxavierr404.crosswave.auth.client.models.RegisterDto
import org.xxavierr404.crosswave.auth.client.models.TokenResponseDto
import org.xxavierr404.crosswave.auth.client.models.UserDataDto
import org.xxavierr404.crosswave.auth.client.infrastructure.*

class DefaultApi(client: WebClient) : ApiClient(client) {

    constructor(baseUrl: String) : this(WebClient.builder()
        .baseUrl(baseUrl)
        .codecs {
            it.defaultCodecs().jackson2JsonEncoder(Jackson2JsonEncoder(Serializer.jacksonObjectMapper, MediaType.APPLICATION_JSON))
            it.defaultCodecs().jackson2JsonDecoder(Jackson2JsonDecoder(Serializer.jacksonObjectMapper, MediaType.APPLICATION_JSON))
        }
        .build()
    )


    @Throws(WebClientResponseException::class)
    fun getToken(getTokenDto: GetTokenDto): Mono<TokenResponseDto> {
        return getTokenWithHttpInfo(getTokenDto = getTokenDto)
            .map { it.body }
    }

    @Throws(WebClientResponseException::class)
    fun getTokenWithHttpInfo(getTokenDto: GetTokenDto): Mono<ResponseEntity<TokenResponseDto>> {
        val localVariableConfig = getTokenRequestConfig(getTokenDto = getTokenDto)
        return request<GetTokenDto, TokenResponseDto>(
            localVariableConfig
        )
    }

    fun getTokenRequestConfig(getTokenDto: GetTokenDto) : RequestConfig<GetTokenDto> {
        val localVariableBody = getTokenDto
        val localVariableQuery = mutableMapOf<kotlin.String, kotlin.collections.List<kotlin.String>>()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders["Content-Type"] = "application/json"
        localVariableHeaders["Accept"] = "application/json"

        val params = mutableMapOf<String, Any>(
        )

        return RequestConfig(
            method = RequestMethod.POST,
            path = "/auth/v1/get-token",
            params = params,
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
            body = localVariableBody
        )
    }


    @Throws(WebClientResponseException::class)
    fun login(loginRequestDto: LoginRequestDto): Mono<UserDataDto> {
        return loginWithHttpInfo(loginRequestDto = loginRequestDto)
            .map { it.body }
    }

    @Throws(WebClientResponseException::class)
    fun loginWithHttpInfo(loginRequestDto: LoginRequestDto): Mono<ResponseEntity<UserDataDto>> {
        val localVariableConfig = loginRequestConfig(loginRequestDto = loginRequestDto)
        return request<LoginRequestDto, UserDataDto>(
            localVariableConfig
        )
    }

    fun loginRequestConfig(loginRequestDto: LoginRequestDto) : RequestConfig<LoginRequestDto> {
        val localVariableBody = loginRequestDto
        val localVariableQuery = mutableMapOf<kotlin.String, kotlin.collections.List<kotlin.String>>()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders["Content-Type"] = "application/json"
        localVariableHeaders["Accept"] = "application/json"

        val params = mutableMapOf<String, Any>(
        )

        return RequestConfig(
            method = RequestMethod.POST,
            path = "/auth/v1/login",
            params = params,
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
            body = localVariableBody
        )
    }


    @Throws(WebClientResponseException::class)
    fun register(registerDto: RegisterDto): Mono<Unit> {
        return registerWithHttpInfo(registerDto = registerDto)
            .map { Unit }
    }

    @Throws(WebClientResponseException::class)
    fun registerWithHttpInfo(registerDto: RegisterDto): Mono<ResponseEntity<Unit>> {
        val localVariableConfig = registerRequestConfig(registerDto = registerDto)
        return request<RegisterDto, Unit>(
            localVariableConfig
        )
    }

    fun registerRequestConfig(registerDto: RegisterDto) : RequestConfig<RegisterDto> {
        val localVariableBody = registerDto
        val localVariableQuery = mutableMapOf<kotlin.String, kotlin.collections.List<kotlin.String>>()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders["Content-Type"] = "application/json"
        
        val params = mutableMapOf<String, Any>(
        )

        return RequestConfig(
            method = RequestMethod.POST,
            path = "/auth/v1/register",
            params = params,
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
            body = localVariableBody
        )
    }

}
