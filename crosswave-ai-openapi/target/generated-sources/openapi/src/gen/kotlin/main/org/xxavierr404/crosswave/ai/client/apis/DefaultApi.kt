/**
 *
 * Please note:
 * This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * Do not edit this file manually.
 *
 */

@file:Suppress(
    "ArrayInDataClass",
    "EnumEntryName",
    "RemoveRedundantQualifierName",
    "UnusedImport"
)

package org.xxavierr404.crosswave.ai.client.apis

import com.fasterxml.jackson.annotation.JsonProperty

import org.springframework.web.reactive.function.client.WebClient
import org.springframework.web.reactive.function.client.WebClientResponseException
import org.springframework.http.codec.json.Jackson2JsonDecoder
import org.springframework.http.codec.json.Jackson2JsonEncoder
import org.springframework.http.ResponseEntity
import org.springframework.http.MediaType
import reactor.core.publisher.Mono
import org.springframework.util.LinkedMultiValueMap

import org.xxavierr404.crosswave.ai.client.models.ErrorDto
import org.xxavierr404.crosswave.ai.client.models.GenrePredictionDto
import org.xxavierr404.crosswave.ai.client.infrastructure.*

class DefaultApi(client: WebClient) : ApiClient(client) {

    constructor(baseUrl: String) : this(WebClient.builder()
        .baseUrl(baseUrl)
        .codecs {
            it.defaultCodecs().jackson2JsonEncoder(Jackson2JsonEncoder(Serializer.jacksonObjectMapper, MediaType.APPLICATION_JSON))
            it.defaultCodecs().jackson2JsonDecoder(Jackson2JsonDecoder(Serializer.jacksonObjectMapper, MediaType.APPLICATION_JSON))
        }
        .build()
    )


    @Throws(WebClientResponseException::class)
    fun predictGenre(file: kotlin.ByteArray): Mono<GenrePredictionDto> {
        return predictGenreWithHttpInfo(file = file)
            .map { it.body }
    }

    @Throws(WebClientResponseException::class)
    fun predictGenreWithHttpInfo(file: kotlin.ByteArray): Mono<ResponseEntity<GenrePredictionDto>> {
        val localVariableConfig = predictGenreRequestConfig(file = file)
        return request<Map<String, PartConfig<*>>, GenrePredictionDto>(
            localVariableConfig
        )
    }

    fun predictGenreRequestConfig(file: kotlin.ByteArray) : RequestConfig<Map<String, PartConfig<*>>> {
        val localVariableBody = mapOf(
            "file" to PartConfig(body = file, headers = mutableMapOf()),)
        val localVariableQuery = mutableMapOf<kotlin.String, kotlin.collections.List<kotlin.String>>()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf("Content-Type" to "multipart/form-data")
        localVariableHeaders["Accept"] = "application/json"

        val params = mutableMapOf<String, Any>(
        )

        return RequestConfig(
            method = RequestMethod.POST,
            path = "/suggest/v1/predict-genre",
            params = params,
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
            body = localVariableBody
        )
    }


    @Throws(WebClientResponseException::class)
    fun suggestTracks(xUserId: kotlin.String): Mono<kotlin.collections.List<java.util.UUID>> {
        return suggestTracksWithHttpInfo(xUserId = xUserId)
            .map { it.body }
    }

    @Throws(WebClientResponseException::class)
    fun suggestTracksWithHttpInfo(xUserId: kotlin.String): Mono<ResponseEntity<kotlin.collections.List<java.util.UUID>>> {
        val localVariableConfig = suggestTracksRequestConfig(xUserId = xUserId)
        return request<Unit, kotlin.collections.List<java.util.UUID>>(
            localVariableConfig
        )
    }

    fun suggestTracksRequestConfig(xUserId: kotlin.String) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery = mutableMapOf<kotlin.String, kotlin.collections.List<kotlin.String>>()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        xUserId.apply { localVariableHeaders["X-User-Id"] = this.toString() }
        localVariableHeaders["Accept"] = "application/json"

        val params = mutableMapOf<String, Any>(
        )

        return RequestConfig(
            method = RequestMethod.GET,
            path = "/suggest/v1/tracks",
            params = params,
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
            body = localVariableBody
        )
    }


    @Throws(WebClientResponseException::class)
    fun suggestUsers(xUserId: kotlin.String): Mono<kotlin.collections.List<java.util.UUID>> {
        return suggestUsersWithHttpInfo(xUserId = xUserId)
            .map { it.body }
    }

    @Throws(WebClientResponseException::class)
    fun suggestUsersWithHttpInfo(xUserId: kotlin.String): Mono<ResponseEntity<kotlin.collections.List<java.util.UUID>>> {
        val localVariableConfig = suggestUsersRequestConfig(xUserId = xUserId)
        return request<Unit, kotlin.collections.List<java.util.UUID>>(
            localVariableConfig
        )
    }

    fun suggestUsersRequestConfig(xUserId: kotlin.String) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery = mutableMapOf<kotlin.String, kotlin.collections.List<kotlin.String>>()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        xUserId.apply { localVariableHeaders["X-User-Id"] = this.toString() }
        localVariableHeaders["Accept"] = "application/json"

        val params = mutableMapOf<String, Any>(
        )

        return RequestConfig(
            method = RequestMethod.GET,
            path = "/suggest/v1/friends",
            params = params,
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
            body = localVariableBody
        )
    }

}
